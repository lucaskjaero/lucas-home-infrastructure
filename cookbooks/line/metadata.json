{"name":"line","version":"2.1.1","description":"Provides line editing resources for use by recipes","long_description":"# line cookbook\n\n[![Build Status](https://www.travis-ci.org/sous-chefs/line.svg?branch=master)](https://www.travis-ci.org/sous-chefs/line)\n\n# Motivation\n\nQuite often, the need arises to do line editing instead of managing an entire file with a template resource. This cookbook supplies various resources that will help you do this.\n\n# Limitations\n\n- The line resources processes the entire target file in memory. Trying to edit large files may fail.\n- The end of line processing was only tested using `\\n` and `\\r\\n`. Using other line endings very well may not work.\n- The end of line string used needs to match the actual end of line used in the file `\\n` and `\\r\\n` are used as the defaults but if they don't match the actual end of line used in the file the results will be weird.\n- Adding a line implies there is a separator on the previous line. Adding a line differs from appending characters.\n- Lines to be added should not contain EOL characters. The providers do not do multiline regex checks.\n- Missing file processing is the way it is by intention\n\n  - `add_to_list` do nothing, list not found so there is nothing to add to.\n  - `append_if_no_line` create file, add the line.\n  - `delete_from_list` do nothing, the list was not found which implies there is nothing to delete\n  - `delete_lines` do nothing, the line isn't there which implies there is nothing to delete\n  - `replace_or_add` create file, add the line\n\n- Chef client version 13 or greater is expected.\n\n# Usage\n\nAdd \"depends 'line'\" to your cookbook's metadata.rb to gain access to the resources.\n\n```ruby\nappend_if_no_line \"make sure a line is in some file\" do\n  path \"/some/file\"\n  line \"HI THERE I AM STRING\"\nend\n\nreplace_or_add \"why hello\" do\n  path \"/some/file\"\n  pattern \"Why hello there.*\"\n  line \"Why hello there, you beautiful person, you.\"\nend\n\ndelete_lines \"remove hash-comments from /some/file\" do\n  path \"/some/file\"\n  pattern \"^#.*\"\nend\n\ndelete_lines \"remove hash-comments from /some/file with a regexp\" do\n  path \"/some/file\"\n  pattern /^#.*/\nend\n\nreplace_or_add \"change the love, don't add more\" do\n  path \"/some/file\"\n  pattern \"Why hello there.*\"\n  line \"Why hello there, you beautiful person, you.\"\n  replace_only true\nend\n\nadd_to_list \"add entry to a list\" do\n  path \"/some/file\"\n  pattern \"People to call: \"\n  delim [\",\"]\n  entry \"Bobby\"\nend\n\ndelete_from_list \"delete entry from a list\" do\n  path \"/some/file\"\n  pattern \"People to call: \"\n  delim [\",\"]\n  entry \"Bobby\"\nend\n\ndelete_lines 'remove from nonexisting' do\n  path '/tmp/doesnotexist'\n  pattern /^#/\n  ignore_missing true\nend\n\n\nfilter_lines 'Shift lines to at least 8 leading spaces' do\n  path '/some/file'\n  filter proc { |current| current.map(|line| line =~ /^ {8}/ ? line : \"       #{line}\") }\nend\n\ninsert_lines = %w(line1 line2 line3)\nmatch_pattern = /^COMMENT ME|^HELLO/\nfilter_lines 'Insert lines after match' do\n  path '/some/file'\n  filter after: [match_pattern, insert_lines]\nend\n\nfilter_lines 'Built in example filters' do\n  path '/tmp/multiple_filters'\n  sensitive false\n  filters(\n    [\n    # insert lines after the last match\n      { after:  [match_pattern, insert_lines, :last] },\n    ]\n  )\nend\n```\n# Resource Notes\n\nThe resources implemented are:\n\n```ruby\nappend_if_no_line - Add a missing line\nreplace_or_add    - Replace a line that matches a pattern or add a missing line\ndelete_lines      - Delete an item from a list\nadd_to_list       - Add an item to a list\ndelete_from_list  - Delete lines that match a pattern\nfilter_lines      - Supply a proc or use a sample filter\n  Sample filters:\n    after         - Insert lines before a match\n\n```\n\n## Resource: append_if_no_line\n\n### Actions\n\nAction | Description\n------ | -------------------------------\nedit   | Append a line if it is missing.\n\n### Properties\n\nProperties     | Description                       | Type          | Values and Default\n-------------- | --------------------------------- | ------------- | ---------------------------------------\npath           | File to update                    | String        | Required, no default\nline           | Line contents                     | String        | Required, no default\nignore_missing | Don't fail if the file is missing | true or false | Default is true\neol            | Alternate line end characters     | String        | default `\\n` on unix, `\\r\\n` on windows\nbackup         | Backup before changing            | Boolean       | default false\n\n### Notes\n\nThis resource is intended to match the whole line **exactly**. That means if the file contains `this is my line` (trailing whitespace) and you've specified `line \"this is my line\"`, another line will be added. You may want to use `replace_or_add` instead, depending on your use case.\n\n## Resource: replace_or_add\n\n### Actions\n\nAction | Description\n------ | -----------------------------------------------------------------------------------------------\nedit   | Replace lines that match the pattern. Append the line unless a source line matches the pattern.\n\n### Properties\n\nProperties     | Description                              | Type                         | Values and Default\n-------------- | ---------------------------------------- | ---------------------------- | ---------------------------------------\npath           | File to update                           | String                       | Required, no default\npattern        | Regular expression to select lines       | Regular expression or String | Required, no default\nline           | Line contents                            | String                       | Required, no default\nreplace_only   | Don't append only replace matching lines | true or false                | Required, no default\nignore_missing | Don't fail if the file is missing        | true or false                | Default is true\neol            | Alternate line end characters            | String                       | default `\\n` on unix, `\\r\\n` on windows\nbackup         | Backup before changing                   | Boolean                      | default false\n\n## Resource: delete_lines\n\n### Actions\n\nAction | Description\n------ | ------------------------------------\nedit   | Delete lines that match the pattern.\n\n### Properties\n\nProperties     | Description                        | Type                         | Values and Default\n-------------- | ---------------------------------- | ---------------------------- | ---------------------------------------\npath           | File to update                     | String                       | Required, no default\npattern        | Regular expression to select lines | Regular expression or String | Required, no default\nignore_missing | Don't fail if the file is missing  | true or false                | Default is true\neol            | Alternate line end characters      | String                       | default `\\n` on unix, `\\r\\n` on windows\nbackup         | Backup before changing             | Boolean                      | default false\n\n### Notes\n\nRemoves lines based on a string or regex.\n\n## Resource: add_to_list\n\n### Actions\n\nAction | Description\n------ | ---------------------\nedit   | Add an item to a list\n\n### Properties\n\nProperties     | Description                        | Type                         | Values and Default\n-------------- | ---------------------------------- | ---------------------------- | -------------------------------------------\npath           | File to update                     | String                       | Required, no default\npattern        | Regular expression to select lines | Regular expression or String | Required, no default\ndelim          | Delimiter entries                  | Array                        | Array of 1, 2 or 3 multi-character elements\nentry          | Value to add                       | String                       | Required, No default\nends_with      | List ending                        | String                       | No default\nignore_missing | Don't fail if the file is missing  | true or false                | Default is true\neol            | Alternate line end characters      | String                       | default `\\n` on unix, `\\r\\n` on windows\nbackup         | Backup before changing             | Boolean                      | default false\n\n### Notes\n\nIf one delimiter is given, it is assumed that either the delimiter or the given search pattern will proceed each entry and each entry will be followed by either the delimiter or a new line character: People to call: Joe, Bobby delim [\",\"] entry 'Karen' People to call: Joe, Bobby, Karen\n\nIf two delimiters are given, the first is used as the list element delimiter and the second as entry delimiters: my @net1918 = (\"10.0.0.0/8\", \"172.16.0.0/12\"); delim [\", \", \"\\\"\"] entry \"192.168.0.0/16\" my @net1918 = (\"10.0.0.0/8\", \"172.16.0.0/12\", \"192.168.0.0/16\");\n\nif three delimiters are given, the first is used as the list element delimiter, the second as the leading entry delimiter and the third as the trailing delimiter: multi = ([310], [818]) delim [\", \", \"[\", \"]\"] entry \"425\" multi = ([310], [818], [425])\n\n`ends_with` is an optional property. If specified a list is expected to end with the given string.\n\n## Resource: delete_from_list\n\n### Actions\n\nAction | Description\n------ | --------------------------\nedit   | Delete an item from a list\n\n### Properties\n\nProperties     | Description                        | Type                         | Values and Default\n-------------- | ---------------------------------- | ---------------------------- | -------------------------------------------\npath           | File to update                     | String                       | Required, no default\npattern        | Regular expression to select lines | Regular expression or String | Required, no default\ndelim          | Delimiter entries                  | Array                        | Array of 1, 2 or 3 multi-character elements\nentry          | Value to delete                    | String                       | Required, No default\nends_with      | List ending                        | String                       | No default\nignore_missing | Don't fail if the file is missing  | true or false                | Default is true\neol            | Alternate line end characters      | String                       | default `\\n` on unix, `\\r\\n` on windows\nbackup         | Backup before changing             | Boolean                      | default false\n\n### Notes\n\nDelimiters works exactly the same way as `add_to_list`, see above.\n\n\n## Resource: filter_lines\n### Actions\nAction | Description\n-------|------------\nedit | Use a proc\n\n### Properties\nProperties | Description | Type | Values and Default\n---------------|-------------|--------|--------\npath           | String |  Path to file | Required, no default\nfilters        | Array of filters, Proc, Method |  See the filter grammar | Required, no default\nignore_missing | Don't fail if the file is missing  |  true or false | Default is true\neol            | Alternate line end characters |  String | default \\n on unix, \\r\\n on windows\nbackup         | Backup before changing |  Boolean | default false\n\n### Notes\nThe filter_lines resource passes the contents of the path file in an array of lines to a Proc or Method\nfilter. The filter should return an array of lines. The output array will be written to the file or passed to the next filter.\nThe built in filters are usable examples of what can be done with a filter, please write your own when you have specific needs.\nThe built in filters all take an array of positional arguments.\n\n### Filter Grammar\n```\n\nfilters ::= filter | [<filter>, ...]\nfilter  ::= <code> | { <code> => <args>  }\nargs    ::= <String> | <Array>\ncode    ::= <Symbol> | <Method> | <Proc>\nSymbol  ::= :after | :before | :between | :comment | :replace | :stanza | :substitute\n            Symbols are translated to methods in Line::Filter\nMethod  ::= A reference to a method that has a signature of method(current lines is Array, args is Array)\n            and that  returns an array\nProc    ::= A reference to a proc that has a signature of proc(current lines is Array, args is Array)\n            and returns an array\n\n```\n\n### Filters\nBuilt in Filter | Description | Arguments | arg1 | arg2  | arg3 |\n----------------|-------------|-----------|--|--|--|\n `:after` | Insert lines after a matching line | Pattern to match | String or Array of lines to insert | `:each`, `:first`, or `:last` to select the matching lines\n\n# Author\n\n- Contributor: Mark Gibbons\n- Contributor: Dan Webb\n- Contributor: Sean OMeara\n- Contributor: Antek S. Baranski\n","maintainer":"Sous Chefs","maintainer_email":"help@sous-chefs.org","license":"Apache-2.0","platforms":{"debian":">= 0.0.0","ubuntu":">= 0.0.0","centos":">= 0.0.0","redhat":">= 0.0.0","scientific":">= 0.0.0","oracle":">= 0.0.0","amazon":">= 0.0.0","windows":">= 0.0.0"},"dependencies":{},"recommendations":{},"suggestions":{},"conflicting":{},"providing":{},"replacing":{},"attributes":{},"groupings":{},"recipes":{},"source_url":"https://github.com/sous-chefs/line-cookbook","issues_url":"https://github.com/sous-chefs/line-cookbook/issues","chef_version":[[">= 12.13.37"]],"ohai_version":[]}